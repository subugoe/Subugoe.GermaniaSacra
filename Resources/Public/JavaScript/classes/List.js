// Generated by CoffeeScript 1.7.1
var List;

List = (function() {
  function List(type) {
    var self;
    this.scope = $('#list');
    self = this;
    this.dataTable = null;
    this.editList(type);
    $('form', this.scope).submit(function(e) {
      e.preventDefault();
      if ($(this).find("input[name=uUID]:checked").length === 0) {
        message("Wählen Sie bitte mindestens einen Eintrag aus.");
        return false;
      } else {
        self.updateList(type);
        return true;
      }
    });
  }

  List.prototype.editList = function(type) {
    var $table, $ths, $uuidFilter, ajaxSuccess, columns, orderBy, self;
    self = this;
    $('#search, #list').hide();
    message(s_loading, false);
    $table = this.scope.find('table:eq(0)');
    $table.find('thead th').not(':first').not(':last').each(function() {
      return $(this).append('<div><input type="text"></div>');
    });
    $ths = $table.find('th');
    columns = [];
    $ths.each(function() {
      if ($(this).data('name') != null) {
        return columns.push({
          data: $(this).data('name')
        });
      }
    });
    columns.push({
      "class": 'no-wrap show-only-on-hover',
      data: null,
      defaultContent: $ths.last().data('html')
    });
    orderBy = $table.find('th.order-by').index();
    if (orderBy < 0) {
      orderBy = 1;
    }
    this.dataTable = $table.DataTable({
      sAjaxSource: '/entity/' + type,
      columns: columns,
      autoWidth: false,
      pageLength: 100,
      columnDefs: [
        {
          bSortable: false,
          aTargets: ['not-sortable']
        }
      ],
      dom: 'lipt',
      language: {
        url: '/_Resources/Static/Packages/Subugoe.GermaniaSacra/JavaScript/DataTables/German.json'
      },
      order: [[orderBy, 'asc']],
      fnServerData: function(sSource, aoData, fnCallback, oSettings) {
        return oSettings.jqXHR = $.ajax({
          cache: false,
          dataType: 'json',
          type: 'GET',
          url: sSource,
          data: aoData,
          success: [ajaxSuccess, fnCallback]
        });
      },
      fnDrawCallback: function() {
        var $tr;
        $tr = $table.find('tbody tr:not(.processed)');
        $tr.children().each(function() {
          var $input, $td, $th, name, option, option_uuid, selectName, uuid, _ref, _ref1;
          $td = $(this);
          $th = $table.find('th[data-name]').eq($td.index());
          if ($th.length) {
            if ($th.data('input') === 'checkbox') {
              $input = $('<input type="checkbox"/>');
            } else {
              $input = $("<" + ($th.data('input')) + "/>");
            }
            $input.attr('name', $th.data('name'));
            if ($th.data('input') === 'select') {
              selectName = $th.data('name');
              if (selectOptions[selectName] != null) {
                _ref = selectOptions[selectName];
                for (uuid in _ref) {
                  name = _ref[uuid];
                  $input.append($('<option/>').text(name).attr('value', uuid));
                }
              }
              _ref1 = selectOptions[selectName];
              for (option_uuid in _ref1) {
                option = _ref1[option_uuid];
                if (option === $(this).text()) {
                  $(this).text(option_uuid);
                  break;
                }
              }
            } else if ($th.data('input') === 'checkbox') {
              if ($td.text() === '1') {
                $input.prop('checked', true);
              }
              if ($input.attr('name') !== 'uuid' && $input.attr('name') !== 'uUID') {
                $td.text('1');
              }
            }
            return $(this).html($input.val($(this).text().trim()));
          }
        });
        $tr.each(function() {
          var uuid;
          uuid = $(this).find(':input[name=uUID]').val();
          $(this).find('textarea').autosize();
          return $(this).find(':input:not([name=uUID])').change(function() {
            $(this).closest('td').addClass('dirty').closest('tr').find(':checkbox:eq(0)').prop('checked', true);
            $('body').addClass('dirty');
            return $(':submit[type=submit]', self.scope).prop('disabled', false);
          });
        });
        $tr.find('select').autocomplete();
        return $tr.addClass('processed');
      }
    }, ajaxSuccess = function(json) {
      var entity, index, key, value, _ref, _results;
      $('#search, #list').slideDown();
      $('#message').slideUp();
      _ref = json.data;
      _results = [];
      for (index in _ref) {
        entity = _ref[index];
        json.data[index].bearbeitungsstatus = selectOptions.bearbeitungsstatus[entity.bearbeitungsstatus];
        _results.push((function() {
          var _results1;
          _results1 = [];
          for (key in entity) {
            value = entity[key];
            if (!value) {
              _results1.push(json.data[index][key] = ' ');
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        })());
      }
      return _results;
    });
    $table.on('click', '.edit', function(e) {
      var uuid;
      e.preventDefault();
      uuid = $(this).closest('tr').find(':input[name=uUID]').first().val();
      return germaniaSacra.editor.edit(type, uuid);
    });
    $table.on('click', '.delete', function(e) {
      var uuid;
      e.preventDefault();
      uuid = $(this).closest('tr').find(':input[name=uUID]').first().val();
      return self["delete"](type, uuid);
    });
    this.dataTable.columns().eq(0).each(function(colIdx) {
      return $('input', self.dataTable.column(colIdx).header()).click(function(e) {
        return e.stopPropagation();
      }).on('keyup change', function() {
        return self.dataTable.column(colIdx).search(this.value).draw();
      });
    });
    $uuidFilter = $('<input id="uuid-filter" type="hidden">');
    $("body").append($uuidFilter);
    $uuidFilter.change(function() {
      return self.dataTable.column(0).search(this.value, true, false).draw();
    });
  };

  List.prototype.updateList = function(type) {
    var $form, $rows, formData;
    $form = $('form', this.scope);
    $rows = this.dataTable.$('tr').has('td:first input:checked');
    formData = {};
    formData.data = {};
    $rows.each(function(i, row) {
      var uuid;
      uuid = $(row).find(':input[name=uUID]').first().val();
      formData.data[uuid] = {};
      return $(row).find(':input:not([name=uUID])').each(function(i, input) {
        if (!$(input).is(':checkbox') || $(input).prop('checked')) {
          if (input.name) {
            formData.data[uuid][input.name] = input.value;
          }
        }
      });
    });
    formData.__csrfToken = $('#csrf').val();
    $.post(type + '/updateList', formData).done((function(_this) {
      return function(respond, status, jqXHR) {
        message('Ihre Änderungen wurden gespeichert.');
        $form.find('.dirty').removeClass('dirty');
        $form.find('input[name=uUID]').prop('checked', false);
        $('body').removeClass('dirty');
        return $(':submit[type=submit]', _this.scope).prop('disabled', true);
      };
    })(this)).fail(function(jqXHR, textStatus) {
      return message('Fehler: Daten konnten nicht gespeichert werden.');
    });
  };

  List.prototype["delete"] = function(type, uuid) {
    var check, csrf;
    check = confirm('Wollen Sie diesen Eintrag wirklich löschen?');
    if (check === true) {
      csrf = $('#csrf').val();
      $.post(type + '/delete/' + uuid, {
        __csrfToken: csrf
      }).done((function(_this) {
        return function(respond, status, jqXHR) {
          if (status === 'success') {
            _this.dataTable.row($('tr').has("td:first input[value='" + uuid + "']")).remove().draw();
            return message('Der Eintrag wurde gelöscht.');
          }
        };
      })(this)).fail(function(jqXHR, textStatus) {
        return message('Fehler: Eintrag konnte nicht gelöscht werden.');
      });
    }
  };

  List.prototype.reload = function() {
    return this.dataTable.ajax.reload();
  };

  return List;

})();
