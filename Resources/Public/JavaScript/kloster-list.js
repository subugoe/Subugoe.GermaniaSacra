// Generated by CoffeeScript 1.7.1
var dataTable;

dataTable = null;

$(function() {
  if ($("#list_form").length) {
    $("#list_form").populate_list();
  }
  $("#list_form").submit(function(e) {
    e.preventDefault();
    if ($("input[name^='uuid']:checked").length === 0) {
      $(this).message("Wählen Sie bitte mindestens einen Eintrag aus.");
      return false;
    }
    return $(this).update_list();
  });
});

$.fn.populate_list = function() {
  var $table, $this, $ths, columns, selectOptions, setSelectOptions;
  $this = $(this);
  $this.hide();
  $('#loading').show();
  $table = $this.find("table:eq(0)");
  $table.find("thead th").not(":first").not(":last").each(function() {
    return $(this).append('<div><input type="text"></div>');
  });
  $ths = $table.find('th');
  columns = [];
  $ths.each(function() {
    if ($(this).data('name') != null) {
      return columns.push({
        data: $(this).data('name')
      });
    }
  });
  columns.push({
    "class": 'no-wrap show-only-on-hover',
    data: null,
    defaultContent: $ths.last().data('html')
  });
  selectOptions = {};
  dataTable = $table.DataTable({
    sAjaxSource: '/_Resources/Static/Packages/Subugoe.GermaniaSacra/Data/kloster.json',
    columns: columns,
    autoWidth: false,
    columnDefs: [
      {
        bSortable: false,
        aTargets: ["no-sorting"]
      }, {
        width: "10%",
        targets: 1
      }
    ],
    dom: "lipt",
    language: {
      url: "/_Resources/Static/Packages/Subugoe.GermaniaSacra/JavaScript/DataTables/German.json"
    },
    order: [[3, "asc"]],
    fnServerData: function(sSource, aoData, fnCallback, oSettings) {
      return oSettings.jqXHR = $.ajax({
        dataType: 'json',
        type: 'GET',
        url: sSource,
        data: aoData,
        success: [setSelectOptions, fnCallback]
      });
    },
    fnDrawCallback: function() {
      var $tr;
      $tr = $table.find('tbody tr:not(.processed)');
      $tr.children().each(function() {
        var $input, $th, obj, _i, _len, _ref;
        $th = $table.find('th[data-name]').eq($(this).index());
        if ($th.length) {
          $input = $('<' + $th.data('input') + '/>').attr({
            name: $th.data('name')
          });
          if ($th.data('name') === 'bearbeitungsstatus') {
            _ref = selectOptions.bearbeitungsstatus;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              obj = _ref[_i];
              $input.append($('<option/>').text(obj.name).attr('value', obj.uuid));
            }
          }
          return $(this).html($input.val($(this).text()));
        }
      });
      $tr.each(function() {
        var uuid;
        uuid = $(this).find(':input[name=uuid]').val();
        $(this).find(".edit").attr("href", "edit/" + uuid);
        $(this).find(".delete").attr("href", "delete/" + uuid);
        $(this).find("textarea").autosize();
        return $(this).find(":input:not(:checkbox)").change(function() {
          return $(this).closest("td").addClass("dirty").closest("tr").find(":checkbox:eq(0)").prop("checked", true);
        });
      });
      return $tr.addClass('processed');
    }
  }, setSelectOptions = function(json) {
    $this.show();
    $('#loading').hide();
    return selectOptions.bearbeitungsstatus = json.bearbeitungsstatus;
  });
  $table.on("click", ".edit", function(e) {
    e.preventDefault();
    return $("#edit_form").read_kloster($(this).attr("href"));
  });
  $table.on("click", ".delete", function(e) {
    e.preventDefault();
    return $("#delete").delete_kloster($(this).attr("href"));
  });
  dataTable.columns().eq(0).each(function(colIdx) {
    return $("input", dataTable.column(colIdx).header()).click(function(e) {
      return e.stopPropagation();
    }).on("keyup change", function() {
      return dataTable.column(colIdx).search(this.value).draw();
    });
  });
  $("body").append('<input id="uuid_filter" type="hidden">');
  $("#uuid_filter").change(function() {
    return dataTable.column(0).search(this.value, true, false).draw();
  });
};

$.fn.update_list = function() {
  var $rows, $this, formData;
  $this = $(this);
  $rows = dataTable.$('tr').has('input:checked');
  formData = {};
  $rows.each(function() {
    var uuid;
    uuid = $(this).find(':input[name=uuid]').val();
    formData['klosters[' + uuid + ']'] = {};
    return $(this).find(':input:not([name=uuid])').each(function(i, input) {
      if (input.name) {
        formData['klosters[' + uuid + ']'][input.name] = input.value;
      }
    });
  });
  formData.__csrfToken = $(this).find('input[name=__csrfToken]').val();
  return $.post('updateList', formData).done(function(respond, status, jqXHR) {
    return $.post("updateSolrAfterListUpdate", {
      uuids: respond
    }).done(function(respond, status, jqXHR) {
      if (status === "success") {
        return $this.message('Ihre Änderungen wurden gespeichert.');
      }
    }).fail(function(jqXHR, textStatus) {
      $this.message('Error');
      return console.dir(jqXHR.responseText);
    });
  }).fail(function(jqXHR, textStatus) {
    $this.message('Error');
    return console.dir(jqXHR.responseText);
  });
};

$.fn.delete_kloster = function(url, csrf) {
  var $this, check;
  $this = $(this);
  check = confirm('Wollen Sie diesen Eintrag wirklich löschen?');
  if (check === true) {
    csrf = $('#csrf').val();
    return $.post(url, {
      __csrfToken: csrf
    }).done(function(respond, status, jqXHR) {
      if (status === "success") {
        return $this.message('Der Eintrag wurde gelöscht.');
      }
    }).fail(function(jqXHR, textStatus) {
      $this.message('Error');
      return console.dir(jqXHR.responseText);
    });
  }
};
