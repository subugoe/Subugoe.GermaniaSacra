// Generated by CoffeeScript 1.7.1
$.fn.addInputs = function(slideTime) {
  if (slideTime == null) {
    slideTime = 0;
  }
  return this.each(function() {
    var $clone, $fieldset;
    $fieldset = $(this).closest("fieldset");
    $clone = $(this).clone(true);
    $clone.clearForm();
    $clone.find("select").autocomplete();
    $clone.insertAfter($(this)).hide().slideDown(slideTime);
    return $fieldset.find(".remove").toggleClass("disabled", $fieldset.find(".multiple:not(.dying)").length === 1);
  });
};

$.fn.removeInputs = function(slideTime) {
  if (slideTime == null) {
    slideTime = 0;
  }
  return this.each(function() {
    var $fieldset;
    $fieldset = $(this).closest("fieldset");
    $fieldset.find(".multiple").length > 1 && $(this).addClass("dying").slideUp(slideTime, this.remove);
    return $fieldset.find(".remove").toggleClass("disabled", $fieldset.find(".multiple:not(.dying)").length === 1);
  });
};

$.fn.clearForm = function() {
  return this.each(function() {
    var $form;
    $form = $(this);
    $form.find("label").removeClass('dirty');
    $form.find(":input").prop('disabled', false);
    $form.find(":input:not([name=__csrfToken]):not(:checkbox):not(:submit)").val('');
    $form.find(":checkbox, :radio").prop('checked', false);
    $form.find('select option:contains("––"), select option:contains("keine Angabe"), select option:contains("unbekannt")').prop('selected', true);
    $form.find(".multiple:gt(0)").removeInputs();
    return $form.find("button.remove").prop('disabled', true);
  });
};

$.fn.autocomplete = function() {
  var delay;
  this.each(function() {
    var $fakeSelect, $filter, $filterContainer, $list, $overlay, $popup, $select, $spinner, isAjax, name, oldVal;
    $select = $(this);
    $select.css({
      opacity: 0
    });
    name = $select.data('type') ? $select.data('type') : $select.attr('name').replace('[]', '');
    isAjax = $select.hasClass('ajax');
    $select.siblings('.autocomplete').remove();
    $select.on('refresh', function() {
      return $fakeSelect.val($select.find(':selected').text()).attr('title', $select.find(':selected').text());
    });
    $fakeSelect = $('<input class="select" type="text">');
    $select.trigger('refresh');
    $spinner = $('<i class="spinner spinner-icon"/>');
    $filter = $('<input type="text">').attr('placeholder', isAjax ? 'Suchen' : 'Filter');
    $filterContainer = $('<div class="filter"/>').append($filter, $spinner);
    $list = $('<ol class="list"/>');
    $popup = $('<div class="popup"/>').append($filterContainer, $list);
    $popup.css({
      top: $('select:eq(0)').outerHeight()
    });
    $overlay = $('<div class="overlay autocomplete"/>').append($fakeSelect, $popup);
    $overlay.insertAfter($select);
    if (!$select.hasClass('ajax')) {
      $.each($select.find('option'), function(index, element) {
        return $list.append("<li data-uuid='" + ($(element).val()) + "'>" + ($(element).text()) + "</li>");
      });
    }
    $fakeSelect.focus(function() {
      $fakeSelect.blur();
      $list.find('li').show().first().addClass('current');
      $('.autocomplete .popup').hide();
      $popup.slideDown();
      return $filter.focus();
    });
    $list.on('click', 'li', function() {
      if (isAjax) {
        $select.empty().append("<option value='" + ($(this).data('uuid')) + "' selected>" + ($(this).text()) + "</option>");
      } else {
        $select.val($(this).data('uuid'));
      }
      $fakeSelect.val($(this).text()).attr('title', $select.find(':selected').text());
      $select.change();
      return $(document).click();
    });
    oldVal = '';
    $filter.on('keydown', function(e) {
      var $current, $newCurrent, $visibleItems;
      $visibleItems = $list.children(':visible');
      $visibleItems.filter('.current:gt(0)').removeClass('current');
      $current = $visibleItems.filter('.current');
      if (!$current.length) {
        $current = $visibleItems.first().addClass('current');
      }
      switch (e.which) {
        case 13:
          e.preventDefault();
          $current.click();
          return false;
        case 38:
          if ($list.children().length > 0) {
            $newCurrent = $current.prevAll(':visible').first();
            if (!$newCurrent.length) {
              $newCurrent = $visibleItems.last();
            }
            $current.removeClass('current');
            $newCurrent.addClass('current');
            $list.scrollTop($newCurrent.offset().top - $list.offset().top + $list.scrollTop() - $list.height() / 3);
          }
          return false;
        case 9:
        case 40:
          if ($list.children().length > 0) {
            $newCurrent = $current.nextAll(':visible').first();
            if (!$newCurrent.length) {
              $newCurrent = $visibleItems.first();
            }
            $current.removeClass('current');
            $newCurrent.addClass('current');
            $list.scrollTop($newCurrent.offset().top - $list.offset().top + $list.scrollTop() - $list.height() / 3);
          }
          return false;
        case 35:
        case 36:
        case 27:
          return $(document).click();
        default:
          if (isAjax) {
            if ($filter.val().length > 0 && $filter.val() !== oldVal) {
              oldVal = $filter.val();
              return delay((function() {
                $spinner.show();
                return $.ajax({
                  url: "/search" + (ucfirst(name)) + "?searchString=" + (encodeURIComponent($filter.val())),
                  type: 'GET',
                  complete: function() {
                    return $spinner.hide();
                  },
                  error: function() {
                    return alert('Fehler: Daten konnten nicht geladen werden.');
                  },
                  success: function(data) {
                    var json;
                    json = $.parseJSON(data);
                    $list.empty();
                    $.each(json, function(index, item) {
                      return $list.append("<li data-uuid='" + item.uUID + "'>" + item.name + "</li>");
                    });
                    return $list.slideDown().scrollTop(0).find('li').first().addClass('current');
                  }
                });
              }), 500);
            }
          } else {
            return $.each($list.find('li'), function(index, item) {
              if ($(item).text().toLowerCase().indexOf($filter.val().toLowerCase()) > -1) {
                return $(item).show();
              } else {
                return $(item).hide();
              }
            });
          }
      }
    });
    $(document).click(function() {
      $popup.slideUp();
      $list.find('.current').removeClass('current');
      return $filter.val('');
    });
    return $overlay.click(function(e) {
      return false;
    });
  });
  return delay = (function() {
    var timer;
    timer = 0;
    return function(callback, ms) {
      clearTimeout(timer);
      return timer = setTimeout(callback, ms);
    };
  })();
};
